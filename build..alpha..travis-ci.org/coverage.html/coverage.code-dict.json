{"/home/travis/build/npmtest/node-npmtest-linux/test.js":"/* istanbul instrument in package npmtest_linux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-linux/lib.npmtest_linux.js":"/* istanbul instrument in package npmtest_linux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_linux = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_linux = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-linux/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-linux && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_linux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_linux\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_linux.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_linux.rollup.js'] =\n            local.assetsDict['/assets.npmtest_linux.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_linux.__dirname + '/lib.npmtest_linux.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-linux/node_modules/linux/cli.js":"#!/usr/bin/env node\n\nvar child = require('child_process')\nvar fs = require('fs')\nvar os = require('os')\nvar path = require('path')\nvar daemon = require('daemonspawn')\nvar catNames = require('cat-names')\nvar keypair = require('keypair')\nvar forge = require('node-forge')\nvar mkdirp = require('mkdirp')\nvar psjson = require('psjson')\nvar minimist = require('minimist')\nvar argv = minimist(process.argv.slice(2), {boolean: true})\n\nhandle(argv._, argv)\n\nfunction handle (cmds, opts) {\n  // needs yosemite 10.10.3 or above for xhyve\n  if (os.platform() !== 'darwin' || os.release() < '14.3.0') return console.error('Error: Mac OS Yosemite 10.10.3 or above required')\n\n  var dir = opts.path || opts.p || path.join(process.cwd(), 'linux')\n  if (!opts.stderr) opts.stderr = path.join(dir, 'stderr.log')\n  if (!opts.stdout) opts.stdout = path.join(dir, 'stdout.log')\n  var linuxPid = opts.pid || path.join(dir, 'linux.pid')\n  var linuxHostname = path.join(dir, 'hostname')\n  var keyPath = path.join(dir, 'id_rsa')\n  var xhyve = __dirname + '/xhyve'\n\n  var cmd = cmds[0]\n  if (typeof cmd === 'undefined') {\n    return console.log(\n      'Usage:     linux <command> [args...]\\n' +\n      '\\n' +\n      'Commands:\\n' +\n      '  init     creates a new ./linux folder in this directory to hold config\\n' +\n      '  boot     boots up linux from config in ./linux\\n' +\n      '  status   checks if linux is running or not\\n' +\n      '  ssh      sshes into linux and attaches the session to your terminal\\n' +\n      '  ip       get the ip of the linux vm\\n' +\n      '  run      runs a single command over ssh\\n' +\n      '  halt     runs sudo halt in linux, initiating a graceful shutdown\\n' +\n      '  kill     immediately ungracefully kills the linux process with SIGKILL\\n' +\n      '  pid      get the pid of the linux process\\n' +\n      '  ps       print all linux processes running on this machine' +\n      ''\n    )\n  }\n\n  if (cmd === 'init') {\n    if (fs.existsSync(dir)) return console.log('Error: linux config folder already exists, skipping init')\n    mkdirp.sync(dir)\n    if (!fs.existsSync(keyPath)) saveNewKeypairSync()\n    console.log('Created new config folder at', dir)\n    return\n  }\n\n  if (cmd === 'boot') {\n    // capability checks\n    if (process.getuid() !== 0) return console.error('Error: must run boot with sudo')\n\n    // ensure linux folder exists\n    if (!fs.existsSync(dir)) return console.log('Error: no linux config folder found, run linux init first')\n\n    // ensure key permissions are correct\n    if (fs.accessSync) fs.accessSync(keyPath)\n\n    getPid()\n\n    return\n  }\n\n  if (cmd === 'pid') {\n    readPid(function (err, pid) {\n      if (err) throw err\n      console.log(pid)\n    })\n    return\n  }\n\n  if (cmd === 'status') {\n    linuxStatus(function (err, running, pid) {\n      if (err) throw err\n      if (running) console.log('Linux is running', {pid: pid})\n      else console.log('Linux is not running')\n    })\n    return\n  }\n\n  if (cmd === 'kill') {\n    linuxStatus(function (err, running, pid) {\n      if (err) throw err\n      if (!running) return console.log('Linux was not running')\n      daemon.kill(pid, function (err) {\n        if (err) throw err\n        console.log('Linux has been killed')\n      })\n    })\n    return\n  }\n\n  if (cmd === 'ip') {\n    var hostname = fs.readFileSync(linuxHostname).toString()\n    parseIp(hostname, function (err, ip) {\n      if (err) throw err\n      console.log(ip)\n    })\n    return\n  }\n\n  if (cmd === 'ssh') {\n    return ssh()\n  }\n\n  if (cmd === 'run') {\n    // run is special, we want to forward raw args to ssh\n    var runIdx\n    for (var i = 0; i < process.argv.length; i++) {\n      if (process.argv[i] === 'run') {\n        runIdx = i\n        break\n      }\n    }\n    // reparse argv so we don't include any run args\n    argv = minimist(process.argv.slice(0, runIdx + 1), {boolean: true})\n    return ssh(process.argv.slice(runIdx + 1))\n  }\n\n  if (cmd === 'halt') {\n    return ssh(['sudo', 'halt'])\n    // todo wait till xhyve actually exits\n  }\n\n  if (cmd === 'ps') {\n    return ps()\n  }\n\n  console.log(cmd, 'is not a valid command')\n\n  function getPid () {\n    fs.exists(linuxPid, function (exists) {\n      if (!exists) return boot()\n      readPid(function (err, pid) {\n        if (err) throw err\n        if (!pid) return boot()\n        getStatus(pid)\n      })\n    })\n  }\n\n  function getStatus (pid) {\n    daemon.status(pid, function (err, running) {\n      if (err) throw err\n      if (running) return console.error('Linux is already running')\n      boot()\n    })\n  }\n\n  function boot () {\n    var hostname = opts.hostname || [catNames.random(), catNames.random(), catNames.random(), catNames.random()].join('-').toLowerCase().replace(/\\s/g, '-')\n    var bootArgs = createBootArgs(hostname, keyPath)\n    var launchPath = 'LAUNCHPATH=' + process.cwd()\n    var cmd = xhyve + ' ' + bootArgs.join(' ') + ' ' + launchPath\n\n    if (opts.debug) return console.log(cmd)\n\n    // convert filenames to file descriptors\n    opts.stdio = ['ignore', fs.openSync(opts.stdout, 'a'), fs.openSync(opts.stderr, 'a')]\n    opts.detached = true\n    var linux = daemon.spawn(cmd, opts)\n    var pid = linux.pid\n    fs.writeFileSync(linuxPid, pid.toString())\n    fs.writeFileSync(linuxHostname, hostname)\n    pollIp(hostname, pid)\n  }\n\n  function pollIp (hostname, pid) {\n    var timeout = Date.now() + (opts.timeout || 1000 * 15)\n\n    check()\n\n    function check () {\n      if (Date.now() > timeout) {\n        console.error('Error: Timed out waiting for linux to boot')\n        kill()\n        return\n      }\n\n      parseIp(hostname, function (err, ip) {\n        if (err) {\n          console.error(err)\n          kill()\n          return\n        }\n        if (!ip) return setTimeout(check, 1000)\n        console.log('Linux has booted', {ip: ip, hostname: hostname, pid: pid})\n      })\n    }\n\n    function kill () {\n      daemon.kill(pid, function (err) {\n        if (err) throw err\n        process.exit(1)\n      })\n    }\n  }\n\n  function saveNewKeypairSync () {\n    var pair = keypair()\n    var publicKey = forge.pki.publicKeyFromPem(pair.public)\n    var ssh = forge.ssh.publicKeyToOpenSSH(publicKey, 'root@localhost') // todo would whoami + hostname be better?\n\n    fs.writeFileSync(keyPath, pair.private, {mode: 384}) // 0600\n    fs.writeFileSync(keyPath + '.pub', ssh)\n  }\n\n  function ssh (commands) {\n    var hostname = fs.readFileSync(linuxHostname).toString()\n    parseIp(hostname, function (err, ip) {\n      if (err) throw err\n      if (!ip) return console.error('Error: Could not find ip for linux hostname', hostname)\n      var args = ['-i', keyPath, '-o', 'StrictHostKeyChecking=no', '-o', 'LogLevel=ERROR', 'tc@' + ip]\n      if (argv.tty || argv.t) args.unshift('-t')\n      if (commands) args = args.concat(commands)\n      if (opts.debug) console.error('spawning', 'ssh', args)\n      child.spawn('ssh', args, {stdio: 'inherit'})\n    })\n  }\n\n  function linuxStatus (cb) {\n    readPid(function (err, pid) {\n      if (err) throw err\n      if (!pid) return cb()\n      daemon.status(pid, function (err, running) {\n        cb(err, running, pid)\n      })\n    })\n  }\n\n  function parseIp (hostname, cb) {\n    child.exec(__dirname + '/get-ip.sh ' + hostname, function (err, stdout, stderr) {\n      if (err) return cb(err)\n      var ip = stdout.toString().trim()\n      cb(null, ip)\n    })\n  }\n\n  function createBootArgs (host, key) {\n    var kernel = __dirname + '/vmlinuz64'\n    var initrd = __dirname + '/initrd.gz'\n    var keyString = '\\\\\"' + fs.readFileSync(key + '.pub').toString().trim() + '\\\\\"'\n    var cmdline = 'earlyprintk=serial host=' + host + ' sshkey=' + keyString\n    var args = [\n      '-A',\n      '-m', '1G',\n      '-s', '0:0,hostbridge',\n      '-s', '31,lpc',\n      '-l', 'com1,stdio',\n      '-s', '2:0,virtio-net',\n      '-f', '\"' + ['kexec', kernel, initrd, cmdline].join(',') + '\"'\n    ]\n    return args\n  }\n\n  function readPid (cb) {\n    fs.readFile(linuxPid, function (err, buf) {\n      if (err) return cb(err)\n      var pid = +buf.toString()\n      if (isNaN(pid)) return cb()\n      cb(null, pid)\n    })\n  }\n\n  function ps () {\n    psjson.ps('ps -eaf', function (err, procs) {\n      if (err) return console.error(err)\n      procs.rows.forEach(function (proc) {\n        if (proc.pid === process.pid) return // its the ps process\n        if (proc.CMD.indexOf(xhyve) === -1) return // was not spawned by us\n        var procDir = proc.CMD.split('LAUNCHPATH=')[1]\n        if (opts.json) return console.log(JSON.stringify({pid: proc.PID, dir: procDir, uptime: proc.TIME}))\n        else console.log('PID: ' + proc.PID + ', ' + 'DIR: ' + procDir + ', ' + 'UPTIME: ' + proc.TIME)\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-linux/node_modules/linux/download.js":"#!/usr/bin/env node\nvar initrd = 'https://github.com/maxogden/hypercore/releases/download/v2.1.0/initrd.gz'\nvar kernel = 'https://github.com/maxogden/hypercore/releases/download/v2.1.0/vmlinuz64'\n\nvar nugget = require('nugget')\n\nconsole.log('Downloading linux kernel + fs from https://github.com/maxogden/hypercore/releases\\n')\n\nnugget([kernel, initrd], {resume: true, verbose: true}, function (err) {\n  if (err) throw err\n  process.exit(0)\n})\n"}